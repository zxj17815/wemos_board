#include <map>
#include <string>
#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7735.h> // Hardware-specific library
#include <SPI.h>
#include <Arduino.h>
#include <ArduinoJson.h>
#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClientSecureBearSSL.h>

/* [字库]：[宋体] [数据排列]:从左到右从上到下 [取模方式]:横向8点左高位 [正负反色]:否 [去掉重复后]共60个字符
[总字符库]："晴少云间多阴有风平静微和清强劲疾大烈暴狂爆飓热带霾中度重严阵雨雷并伴冰雹小特极端降毛细雪天气夹冻浮尘扬沙龙卷雾浓轻冷未知
无向东北南西旋转不定"*/
#pragma region 字库
/*-- ID:0,字符:"晴",ASCII编码:C7E7,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_0[] PROGMEM = {0x00, 0x40, 0x08, 0x48, 0x7F, 0xFC, 0x48, 0x40, 0x4B, 0xF8, 0x48, 0x40, 0x4F, 0xFE, 0x78, 0x08, 0x4B, 0xFC, 0x4A, 0x08, 0x4B, 0xF8, 0x4A, 0x08, 0x7B, 0xF8, 0x4A, 0x08, 0x02, 0x28, 0x02, 0x10};

/*-- ID:1,字符:"少",ASCII编码:C9D9,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_1[] PROGMEM = {0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x09, 0x20, 0x09, 0x10, 0x11, 0x0C, 0x11, 0x04, 0x21, 0x10, 0x41, 0x10, 0x01, 0x20, 0x01, 0x40, 0x00, 0x80, 0x01, 0x00, 0x02, 0x00, 0x0C, 0x00, 0x70, 0x00};

/*-- ID:2,字符:"云",ASCII编码:D4C6,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_2[] PROGMEM = {0x00, 0x00, 0x00, 0x20, 0x1F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xFF, 0xFE, 0x02, 0x00, 0x02, 0x00, 0x04, 0x00, 0x04, 0x00, 0x08, 0x00, 0x08, 0x20, 0x10, 0x10, 0x3F, 0xF8, 0x00, 0x08};

/*-- ID:3,字符:"间",ASCII编码:BCE4,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_3[] PROGMEM = {0x20, 0x04, 0x1B, 0xFE, 0x08, 0x04, 0x40, 0x24, 0x4F, 0xF4, 0x48, 0x24, 0x48, 0x24, 0x48, 0x24, 0x4F, 0xE4, 0x48, 0x24, 0x48, 0x24, 0x48, 0x24, 0x4F, 0xE4, 0x48, 0x24, 0x40, 0x14, 0x40, 0x08};

/*-- ID:4,字符:"多",ASCII编码:B6E0,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_4[] PROGMEM = {0x02, 0x00, 0x02, 0x00, 0x07, 0xF0, 0x08, 0x20, 0x18, 0x40, 0x25, 0x80, 0x02, 0x80, 0x0C, 0x80, 0x71, 0xFC, 0x02, 0x08, 0x0C, 0x10, 0x12, 0x20, 0x21, 0xC0, 0x01, 0x00, 0x0E, 0x00, 0x70, 0x00};

/*-- ID:5,字符:"阴",ASCII编码:D2F5,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_5[] PROGMEM = {0x00, 0x04, 0x7C, 0xFE, 0x44, 0x84, 0x48, 0x84, 0x48, 0x84, 0x50, 0xFC, 0x48, 0x84, 0x48, 0x84, 0x44, 0x84, 0x44, 0xFC, 0x44, 0x84, 0x68, 0x84, 0x51, 0x04, 0x41, 0x04, 0x42, 0x14, 0x44, 0x08};

/*-- ID:6,字符:"有",ASCII编码:D3D0,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_6[] PROGMEM = {0x02, 0x00, 0x02, 0x04, 0xFF, 0xFE, 0x04, 0x00, 0x04, 0x10, 0x0F, 0xF8, 0x08, 0x10, 0x18, 0x10, 0x2F, 0xF0, 0x48, 0x10, 0x88, 0x10, 0x0F, 0xF0, 0x08, 0x10, 0x08, 0x10, 0x08, 0x50, 0x08, 0x20};

/*-- ID:7,字符:"风",ASCII编码:B7E7,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_7[] PROGMEM = {0x00, 0x10, 0x3F, 0xF8, 0x20, 0x10, 0x28, 0x50, 0x24, 0x50, 0x22, 0x90, 0x22, 0x90, 0x21, 0x10, 0x21, 0x10, 0x22, 0x90, 0x22, 0x90, 0x24, 0x50, 0x28, 0x50, 0x30, 0x12, 0x40, 0x0A, 0x80, 0x06};

/*-- ID:8,字符:"平",ASCII编码:C6BD,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_8[] PROGMEM = {0x00, 0x08, 0x7F, 0xFC, 0x01, 0x00, 0x11, 0x10, 0x11, 0x10, 0x09, 0x20, 0x09, 0x20, 0x01, 0x04, 0xFF, 0xFE, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00};

/*-- ID:9,字符:"静",ASCII编码:BEB2,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_9[] PROGMEM = {0x08, 0x40, 0x08, 0x40, 0x7E, 0xF8, 0x09, 0x10, 0x3E, 0x24, 0x08, 0xFE, 0xFF, 0x24, 0x00, 0x24, 0x3F, 0xFE, 0x22, 0x24, 0x3E, 0x24, 0x22, 0xFC, 0x3E, 0x24, 0x22, 0x20, 0x22, 0xA0, 0x26, 0x40};

/*-- ID:10,字符:"微",ASCII编码:CEA2,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_10[] PROGMEM = {0x12, 0x10, 0x12, 0x10, 0x2A, 0x90, 0x4A, 0xA4, 0x8A, 0xBE, 0x1F, 0xC4, 0x20, 0x24, 0x7F, 0xA8, 0xA0, 0x28, 0x2F, 0x28, 0x29, 0x10, 0x29, 0x50, 0x29, 0xA8, 0x29, 0x28, 0x30, 0x46, 0x20, 0x84};

/*-- ID:11,字符:"和",ASCII编码:BACD,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_11[] PROGMEM = {0x02, 0x00, 0x07, 0x00, 0x78, 0x00, 0x08, 0x04, 0x0A, 0xFE, 0xFF, 0x84, 0x08, 0x84, 0x18, 0x84, 0x1C, 0x84, 0x2A, 0x84, 0x2A, 0x84, 0x48, 0x84, 0x88, 0xFC, 0x08, 0x84, 0x08, 0x00, 0x08, 0x00};

/*-- ID:12,字符:"清",ASCII编码:C7E5,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_12[] PROGMEM = {0x00, 0x40, 0x40, 0x48, 0x37, 0xFC, 0x10, 0x40, 0x83, 0xF8, 0x60, 0x40, 0x2F, 0xFE, 0x08, 0x08, 0x13, 0xFC, 0x22, 0x08, 0xE3, 0xF8, 0x22, 0x08, 0x23, 0xF8, 0x22, 0x08, 0x22, 0x28, 0x22, 0x10};

/*-- ID:13,字符:"强",ASCII编码:C7BF,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_13[] PROGMEM = {0x08, 0x04, 0xFD, 0xFE, 0x09, 0x04, 0x09, 0x04, 0x09, 0xFC, 0x79, 0x24, 0x48, 0x20, 0x43, 0xFE, 0x42, 0x22, 0x7A, 0x22, 0x0B, 0xFE, 0x0A, 0x22, 0x08, 0x20, 0x88, 0x24, 0x53, 0xFE, 0x20, 0x02};

/*-- ID:14,字符:"劲",ASCII编码:BEA2,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_14[] PROGMEM = {0x00, 0x20, 0xFF, 0x20, 0x02, 0x20, 0x04, 0x24, 0x0C, 0xFE, 0x12, 0x24, 0x21, 0x24, 0x40, 0x24, 0xFE, 0x24, 0x08, 0x24, 0x08, 0x44, 0x08, 0x44, 0x0F, 0x84, 0x71, 0x04, 0x22, 0x28, 0x00, 0x10};

/*-- ID:15,字符:"疾",ASCII编码:BCB2,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_15[] PROGMEM = {0x01, 0x00, 0x00, 0x84, 0x1F, 0xFE, 0x12, 0x00, 0x92, 0x08, 0x53, 0xFC, 0x54, 0x40, 0x18, 0x40, 0x30, 0x44, 0x5F, 0xFE, 0xD0, 0x40, 0x10, 0xA0, 0x20, 0xA0, 0x21, 0x10, 0x42, 0x0E, 0x0C, 0x04};

/*-- ID:16,字符:"大",ASCII编码:B4F3,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_16[] PROGMEM = {0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x04, 0xFF, 0xFE, 0x01, 0x00, 0x02, 0x80, 0x02, 0x80, 0x02, 0x40, 0x04, 0x40, 0x04, 0x20, 0x08, 0x10, 0x10, 0x0E, 0x60, 0x04, 0x00, 0x00};

/*-- ID:17,字符:"烈",ASCII编码:C1D2,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_17[] PROGMEM = {0x01, 0x04, 0x7F, 0x84, 0x10, 0x24, 0x10, 0x24, 0x1F, 0x24, 0x21, 0x24, 0x21, 0x24, 0x52, 0x24, 0x0C, 0x24, 0x08, 0x04, 0x30, 0x0C, 0x40, 0x00, 0x28, 0x90, 0x24, 0x4C, 0x44, 0x46, 0x80, 0x02};

/*-- ID:18,字符:"暴",ASCII编码:B1A9,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_18[] PROGMEM = {0x1F, 0xF0, 0x10, 0x10, 0x1F, 0xF0, 0x10, 0x10, 0x1F, 0xF0, 0x04, 0x40, 0x7F, 0xFC, 0x04, 0x40, 0xFF, 0xFE, 0x04, 0x40, 0x09, 0x20, 0x35, 0x5E, 0xC3, 0x84, 0x09, 0x20, 0x11, 0x10, 0x03, 0x00};

/*-- ID:19,字符:"狂",ASCII编码:BFF1,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_19[] PROGMEM = {0x82, 0x04, 0x47, 0xFE, 0x28, 0x20, 0x10, 0x20, 0x28, 0x20, 0x48, 0x20, 0x88, 0x28, 0x09, 0xFC, 0x18, 0x20, 0x28, 0x20, 0x48, 0x20, 0x88, 0x20, 0x08, 0x20, 0x08, 0x24, 0x57, 0xFE, 0x20, 0x00};

/*-- ID:20,字符:"爆",ASCII编码:B1AC,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_20[] PROGMEM = {0x13, 0xF8, 0x12, 0x08, 0x13, 0xF8, 0x16, 0x08, 0x5B, 0xF8, 0x51, 0x10, 0x57, 0xFC, 0x91, 0x10, 0x1F, 0xFE, 0x11, 0x10, 0x12, 0x48, 0x2D, 0x56, 0x28, 0xE4, 0x41, 0x50, 0x82, 0x48, 0x00, 0xC0};

/*-- ID:21,字符:"飓",ASCII编码:ECAB,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_21[] PROGMEM = {0x04, 0x08, 0x7E, 0xFC, 0x44, 0x88, 0x44, 0xF8, 0x44, 0x88, 0x6C, 0xF8, 0x6C, 0x88, 0x54, 0xF8, 0x54, 0x88, 0x54, 0x88, 0x6F, 0xFE, 0x6C, 0x50, 0x44, 0x8A, 0x44, 0x02, 0x43, 0xFE, 0x80, 0x00};

/*-- ID:22,字符:"热",ASCII编码:C8C8,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_22[] PROGMEM = {0x08, 0x40, 0x08, 0x40, 0x08, 0x48, 0x7F, 0xFC, 0x08, 0x48, 0x0A, 0x48, 0x1C, 0xC8, 0x68, 0x48, 0x08, 0xA8, 0x08, 0x8A, 0x29, 0x0A, 0x12, 0x04, 0x00, 0x00, 0x48, 0x88, 0x44, 0x46, 0x84, 0x42};

/*-- ID:23,字符:"带",ASCII编码:B4F8,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_23[] PROGMEM = {0x09, 0x20, 0x09, 0x28, 0x7F, 0xFC, 0x09, 0x20, 0x09, 0x20, 0x7F, 0xFE, 0x41, 0x02, 0x81, 0x04, 0x1F, 0xF0, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x50, 0x11, 0x20, 0x01, 0x00};

/*-- ID:24,字符:"霾",ASCII编码:F6B2,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_24[] PROGMEM = {0x1F, 0xF0, 0x01, 0x00, 0x7F, 0xFE, 0x51, 0x12, 0x8D, 0x64, 0x10, 0x10, 0x2B, 0xFC, 0xE5, 0x24, 0x19, 0xFC, 0x69, 0x24, 0x95, 0xFC, 0x64, 0x20, 0x05, 0xFC, 0x64, 0x20, 0x17, 0xFE, 0x08, 0x00};

/*-- ID:25,字符:"中",ASCII编码:D6D0,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_25[] PROGMEM = {0x01, 0x00, 0x01, 0x00, 0x01, 0x04, 0x7F, 0xFE, 0x41, 0x04, 0x41, 0x04, 0x41, 0x04, 0x41, 0x04, 0x7F, 0xFC, 0x41, 0x04, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00};

/*-- ID:26,字符:"度",ASCII编码:B6C8,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_26[] PROGMEM = {0x01, 0x00, 0x00, 0x84, 0x3F, 0xFE, 0x22, 0x20, 0x22, 0x28, 0x3F, 0xFC, 0x22, 0x20, 0x23, 0xE0, 0x20, 0x00, 0x2F, 0xF0, 0x22, 0x20, 0x21, 0x40, 0x20, 0x80, 0x43, 0x60, 0x8C, 0x1E, 0x30, 0x04};

/*-- ID:27,字符:"重",ASCII编码:D6D8,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_27[] PROGMEM = {0x00, 0x38, 0x3F, 0xC0, 0x01, 0x04, 0xFF, 0xFE, 0x01, 0x10, 0x1F, 0xF8, 0x11, 0x10, 0x1F, 0xF0, 0x11, 0x10, 0x1F, 0xF0, 0x01, 0x00, 0x3F, 0xF8, 0x01, 0x00, 0x01, 0x04, 0xFF, 0xFE, 0x00, 0x00};

/*-- ID:28,字符:"严",ASCII编码:D1CF,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_28[] PROGMEM = {0x00, 0x08, 0x7F, 0xFC, 0x02, 0x40, 0x12, 0x48, 0x0A, 0x50, 0x02, 0x44, 0x3F, 0xFE, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x40, 0x00, 0x80, 0x00};

/*-- ID:29,字符:"阵",ASCII编码:D5F3,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_29[] PROGMEM = {0x00, 0x80, 0x78, 0x84, 0x4F, 0xFE, 0x50, 0x80, 0x50, 0xA0, 0x61, 0x20, 0x51, 0x28, 0x4B, 0xFC, 0x48, 0x20, 0x48, 0x20, 0x68, 0x24, 0x57, 0xFE, 0x40, 0x20, 0x40, 0x20, 0x40, 0x20, 0x40, 0x20};

/*-- ID:30,字符:"雨",ASCII编码:D3EA,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_30[] PROGMEM = {0x00, 0x04, 0xFF, 0xFE, 0x01, 0x00, 0x01, 0x08, 0x3F, 0xFC, 0x21, 0x08, 0x21, 0x08, 0x29, 0x48, 0x25, 0x28, 0x21, 0x08, 0x21, 0x08, 0x29, 0x48, 0x25, 0x28, 0x21, 0x08, 0x21, 0x28, 0x20, 0x10};

/*-- ID:31,字符:"雷",ASCII编码:C0D7,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_31[] PROGMEM = {0x00, 0x10, 0x3F, 0xF8, 0x01, 0x00, 0x7F, 0xFE, 0x41, 0x02, 0x9D, 0x74, 0x01, 0x00, 0x1D, 0x70, 0x01, 0x00, 0x3F, 0xF8, 0x21, 0x08, 0x21, 0x08, 0x3F, 0xF8, 0x21, 0x08, 0x21, 0x08, 0x3F, 0xF8};

/*-- ID:32,字符:"并",ASCII编码:B2A2,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_32[] PROGMEM = {0x10, 0x10, 0x0C, 0x30, 0x04, 0x40, 0x3F, 0xFC, 0x04, 0x20, 0x04, 0x20, 0x04, 0x20, 0x04, 0x24, 0xFF, 0xFE, 0x04, 0x20, 0x04, 0x20, 0x04, 0x20, 0x08, 0x20, 0x08, 0x20, 0x10, 0x20, 0x20, 0x20};

/*-- ID:33,字符:"伴",ASCII编码:B0E9,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_33[] PROGMEM = {0x08, 0x40, 0x08, 0x40, 0x0A, 0x48, 0x11, 0x50, 0x10, 0x40, 0x37, 0xFC, 0x30, 0x40, 0x50, 0x40, 0x90, 0x44, 0x1F, 0xFE, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40};

/*-- ID:34,字符:"冰",ASCII编码:B1F9,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_34[] PROGMEM = {0x00, 0x80, 0x40, 0x80, 0x30, 0x84, 0x10, 0x8C, 0x00, 0x90, 0x0F, 0xA0, 0x11, 0xC0, 0x12, 0xC0, 0x22, 0xA0, 0xE4, 0x90, 0x24, 0x88, 0x28, 0x8E, 0x30, 0x84, 0x20, 0x80, 0x22, 0x80, 0x21, 0x00};

/*-- ID:35,字符:"雹",ASCII编码:B1A2,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_35[] PROGMEM = {0x1F, 0xF0, 0x01, 0x00, 0x7F, 0xFE, 0x41, 0x02, 0x9D, 0x74, 0x01, 0x00, 0x1D, 0x70, 0x08, 0x00, 0x0F, 0xF0, 0x10, 0x90, 0x2F, 0xD0, 0x48, 0x90, 0x0F, 0x90, 0x08, 0xB4, 0x08, 0x04, 0x07, 0xFC};

/*-- ID:36,字符:"小",ASCII编码:D0A1,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_36[] PROGMEM = {0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x05, 0x40, 0x05, 0x20, 0x09, 0x10, 0x09, 0x08, 0x11, 0x04, 0x21, 0x04, 0x41, 0x00, 0x01, 0x00, 0x01, 0x00, 0x05, 0x00, 0x02, 0x00};

/*-- ID:37,字符:"特",ASCII编码:CCD8,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_37[] PROGMEM = {0x10, 0x40, 0x10, 0x40, 0x50, 0x48, 0x53, 0xFC, 0x7C, 0x40, 0x90, 0x44, 0x17, 0xFE, 0x18, 0x10, 0x30, 0x14, 0xD7, 0xFE, 0x11, 0x10, 0x10, 0x90, 0x10, 0x90, 0x10, 0x10, 0x10, 0x50, 0x10, 0x20};

/*-- ID:38,字符:"极",ASCII编码:BCAB,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_38[] PROGMEM = {0x10, 0x08, 0x17, 0xFC, 0x11, 0x08, 0x11, 0x08, 0xFD, 0x10, 0x11, 0x10, 0x31, 0x3C, 0x39, 0x84, 0x55, 0x88, 0x51, 0x48, 0x92, 0x50, 0x12, 0x20, 0x12, 0x50, 0x14, 0x88, 0x19, 0x0E, 0x12, 0x04};

/*-- ID:39,字符:"端",ASCII编码:B6CB,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_39[] PROGMEM = {0x00, 0x20, 0x20, 0x20, 0x11, 0x24, 0x11, 0x24, 0xFD, 0x24, 0x01, 0xFC, 0x48, 0x00, 0x4B, 0xFE, 0x48, 0x44, 0x49, 0xFE, 0x49, 0x54, 0x11, 0x54, 0x1D, 0x54, 0xE1, 0x54, 0x41, 0x04, 0x01, 0x0C};

/*-- ID:40,字符:"降",ASCII编码:BDB5,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_40[] PROGMEM = {0x00, 0x80, 0x7C, 0x80, 0x45, 0xF8, 0x4A, 0x10, 0x48, 0xA0, 0x50, 0x40, 0x49, 0xB0, 0x4A, 0x4E, 0x44, 0x44, 0x45, 0xF0, 0x45, 0x40, 0x69, 0x48, 0x53, 0xFC, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40};

/*-- ID:41,字符:"毛",ASCII编码:C3AB,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_41[] PROGMEM = {0x00, 0x10, 0x00, 0x78, 0x3F, 0x80, 0x02, 0x00, 0x02, 0x20, 0x03, 0xF0, 0x3E, 0x00, 0x02, 0x08, 0x03, 0xFC, 0xFE, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x02, 0x02, 0x02, 0x01, 0xFE, 0x00, 0x00};

/*-- ID:42,字符:"细",ASCII编码:CFB8,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_42[] PROGMEM = {0x10, 0x00, 0x10, 0x04, 0x21, 0xFE, 0x21, 0x24, 0x45, 0x24, 0xF9, 0x24, 0x11, 0x24, 0x21, 0x24, 0x41, 0xFC, 0xFD, 0x24, 0x01, 0x24, 0x01, 0x24, 0x1D, 0x24, 0xE1, 0x24, 0x41, 0xFC, 0x01, 0x04};

/*-- ID:43,字符:"雪",ASCII编码:D1A9,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_43[] PROGMEM = {0x1F, 0xF0, 0x01, 0x00, 0x7F, 0xFE, 0x41, 0x02, 0x9D, 0x74, 0x01, 0x00, 0x1D, 0x70, 0x01, 0x08, 0x3F, 0xFC, 0x00, 0x08, 0x00, 0x08, 0x1F, 0xF8, 0x00, 0x08, 0x00, 0x08, 0x3F, 0xF8, 0x00, 0x08};

/*-- ID:44,字符:"天",ASCII编码:CCEC,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_44[] PROGMEM = {0x00, 0x08, 0x7F, 0xFC, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x04, 0xFF, 0xFE, 0x01, 0x00, 0x02, 0x80, 0x02, 0x80, 0x04, 0x40, 0x04, 0x40, 0x08, 0x20, 0x10, 0x10, 0x20, 0x0E, 0xC0, 0x04};

/*-- ID:45,字符:"气",ASCII编码:C6F8,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_45[] PROGMEM = {0x10, 0x00, 0x10, 0x08, 0x1F, 0xFC, 0x20, 0x00, 0x2F, 0xF0, 0x40, 0x00, 0xBF, 0xE0, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x22, 0x00, 0x12, 0x00, 0x0A, 0x00, 0x04};

/*-- ID:46,字符:"夹",ASCII编码:BCD0,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_46[] PROGMEM = {0x01, 0x00, 0x01, 0x00, 0x01, 0x08, 0x7F, 0xFC, 0x01, 0x00, 0x11, 0x10, 0x09, 0x20, 0x01, 0x04, 0xFF, 0xFE, 0x01, 0x00, 0x02, 0x80, 0x02, 0x80, 0x04, 0x40, 0x08, 0x30, 0x30, 0x0E, 0xC0, 0x04};

/*-- ID:47,字符:"冻",ASCII编码:B6B3,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_47[] PROGMEM = {0x00, 0x40, 0x40, 0x48, 0x23, 0xFC, 0x10, 0x80, 0x10, 0x80, 0x01, 0x20, 0x01, 0x24, 0x0B, 0xFE, 0x10, 0x20, 0x60, 0xA0, 0x20, 0xA8, 0x21, 0x24, 0x22, 0x22, 0x24, 0x22, 0x20, 0xA0, 0x00, 0x40};

/*-- ID:48,字符:"浮",ASCII编码:B8A1,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_48[] PROGMEM = {0x40, 0x08, 0x30, 0x3C, 0x17, 0xC0, 0x00, 0x08, 0x82, 0x48, 0x62, 0x50, 0x20, 0x00, 0x0B, 0xF8, 0x10, 0x20, 0x20, 0x44, 0xEF, 0xFE, 0x20, 0x40, 0x20, 0x40, 0x20, 0x40, 0x21, 0x40, 0x20, 0x80};

/*-- ID:49,字符:"尘",ASCII编码:B3BE,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_49[] PROGMEM = {0x01, 0x00, 0x01, 0x00, 0x05, 0x40, 0x0D, 0x20, 0x11, 0x18, 0x21, 0x0C, 0x41, 0x04, 0x00, 0x00, 0x01, 0x00, 0x01, 0x08, 0x7F, 0xFC, 0x01, 0x00, 0x01, 0x00, 0x01, 0x04, 0xFF, 0xFE, 0x00, 0x00};

/*-- ID:50,字符:"扬",ASCII编码:D1EF,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_50[] PROGMEM = {0x10, 0x00, 0x13, 0xF8, 0x10, 0x10, 0x10, 0x20, 0xFC, 0x40, 0x10, 0x84, 0x17, 0xFE, 0x18, 0xA4, 0x30, 0xA4, 0xD0, 0xA4, 0x11, 0x24, 0x11, 0x44, 0x12, 0x44, 0x14, 0x84, 0x51, 0x28, 0x20, 0x10};

/*-- ID:51,字符:"沙",ASCII编码:C9B3,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_51[] PROGMEM = {0x00, 0x40, 0x20, 0x40, 0x18, 0x40, 0x08, 0x40, 0x81, 0x50, 0x61, 0x48, 0x22, 0x46, 0x0A, 0x42, 0x14, 0x48, 0x20, 0x48, 0xE0, 0x50, 0x20, 0x20, 0x20, 0x40, 0x20, 0x80, 0x23, 0x00, 0x2C, 0x00};

/*-- ID:52,字符:"龙",ASCII编码:C1FA,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_52[] PROGMEM = {0x02, 0x00, 0x02, 0x40, 0x02, 0x20, 0x02, 0x04, 0xFF, 0xFE, 0x02, 0x80, 0x02, 0x88, 0x04, 0x88, 0x04, 0x90, 0x04, 0xA0, 0x08, 0xC0, 0x08, 0x82, 0x11, 0x82, 0x16, 0x82, 0x20, 0x7E, 0x40, 0x00};

/*-- ID:53,字符:"卷",ASCII编码:BEED,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_53[] PROGMEM = {0x01, 0x00, 0x11, 0x10, 0x09, 0x20, 0x01, 0x08, 0x7F, 0xFC, 0x02, 0x80, 0xFF, 0xFE, 0x04, 0x40, 0x08, 0x20, 0x1F, 0xF0, 0x28, 0x2E, 0xC8, 0x24, 0x09, 0x20, 0x08, 0xC8, 0x08, 0x08, 0x07, 0xF8};

/*-- ID:54,字符:"雾",ASCII编码:CEED,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_54[] PROGMEM = {0x3F, 0xF8, 0x01, 0x00, 0x7F, 0xFE, 0x51, 0x12, 0x89, 0x24, 0x14, 0x10, 0x07, 0xE0, 0x0C, 0x40, 0x13, 0x80, 0x0C, 0x60, 0xF2, 0x1E, 0x0F, 0xE4, 0x02, 0x20, 0x04, 0x20, 0x08, 0xA0, 0x30, 0x40};

/*-- ID:55,字符:"浓",ASCII编码:C5A8,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_55[] PROGMEM = {0x40, 0x40, 0x30, 0x40, 0x17, 0xFC, 0x04, 0x44, 0x88, 0x48, 0x60, 0x80, 0x20, 0x84, 0x09, 0x4C, 0x13, 0x50, 0x25, 0x20, 0xE9, 0x20, 0x21, 0x10, 0x21, 0x0E, 0x21, 0x44, 0x21, 0x80, 0x21, 0x00};

/*-- ID:56,字符:"轻",ASCII编码:C7E1,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_56[] PROGMEM = {0x10, 0x00, 0x11, 0xFC, 0x14, 0x08, 0xFE, 0x10, 0x20, 0x38, 0x28, 0xCC, 0x4B, 0x02, 0x7C, 0x00, 0x08, 0x08, 0x09, 0xFC, 0x0E, 0x20, 0xF8, 0x20, 0x48, 0x20, 0x08, 0x24, 0x0B, 0xFE, 0x08, 0x00};

/*-- ID:57,字符:"冷",ASCII编码:C0E4,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_57[] PROGMEM = {0x00, 0x80, 0x40, 0x80, 0x31, 0x40, 0x12, 0x20, 0x04, 0x10, 0x09, 0x08, 0x10, 0x8E, 0x10, 0x84, 0x27, 0xF0, 0xE0, 0x10, 0x20, 0x20, 0x20, 0x40, 0x22, 0x80, 0x21, 0x00, 0x20, 0xC0, 0x00, 0x40};

/*-- ID:58,字符:"未",ASCII编码:CEB4,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_58[] PROGMEM = {0x01, 0x00, 0x01, 0x00, 0x01, 0x08, 0x7F, 0xFC, 0x01, 0x00, 0x01, 0x00, 0x01, 0x04, 0xFF, 0xFE, 0x03, 0x80, 0x05, 0x40, 0x09, 0x20, 0x11, 0x10, 0x21, 0x0E, 0x41, 0x04, 0x01, 0x00, 0x01, 0x00};

/*-- ID:59,字符:"知",ASCII编码:D6AA,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_59[] PROGMEM = {0x20, 0x00, 0x20, 0x00, 0x22, 0x04, 0x3F, 0x7E, 0x28, 0x44, 0x48, 0x44, 0x88, 0x44, 0x09, 0x44, 0xFF, 0xC4, 0x08, 0x44, 0x08, 0x44, 0x14, 0x44, 0x12, 0x44, 0x22, 0x7C, 0x40, 0x44, 0x80, 0x00};

/*-- ID:60,字符:"无",ASCII编码:CEDE,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_60[] PROGMEM = {
    0x00, 0x20, 0x3F, 0xF0, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x08, 0x7F, 0xFC, 0x02, 0x80,
    0x02, 0x80, 0x04, 0x80, 0x04, 0x80, 0x08, 0x80, 0x08, 0x82, 0x10, 0x82, 0x20, 0x7E, 0x40, 0x00};

/*-- ID:61,字符:"向",ASCII编码:CFF2,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_61[] PROGMEM = {
    0x02, 0x00, 0x04, 0x00, 0x08, 0x04, 0x7F, 0xFE, 0x40, 0x04, 0x40, 0x24, 0x4F, 0xF4, 0x48, 0x24,
    0x48, 0x24, 0x48, 0x24, 0x48, 0x24, 0x4F, 0xE4, 0x48, 0x24, 0x40, 0x04, 0x40, 0x14, 0x40, 0x08};

/*-- ID:62,字符:"东",ASCII编码:B6AB,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_62[] PROGMEM = {
    0x02, 0x00, 0x02, 0x00, 0x02, 0x04, 0xFF, 0xFE, 0x04, 0x00, 0x09, 0x00, 0x09, 0x00, 0x11, 0x10,
    0x3F, 0xF8, 0x01, 0x00, 0x09, 0x40, 0x09, 0x20, 0x11, 0x10, 0x21, 0x18, 0x45, 0x08, 0x02, 0x00};

/*-- ID:63,字符:"北",ASCII编码:B1B1,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_63[] PROGMEM = {
    0x04, 0x80, 0x04, 0x80, 0x04, 0x88, 0x04, 0x98, 0x04, 0xA0, 0x7C, 0xC0, 0x04, 0x80, 0x04, 0x80,
    0x04, 0x80, 0x04, 0x80, 0x04, 0x80, 0x04, 0x80, 0x1C, 0x82, 0xE4, 0x82, 0x44, 0x7E, 0x00, 0x00};

/*-- ID:64,字符:"南",ASCII编码:C4CF,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_64[] PROGMEM = {
    0x01, 0x00, 0x01, 0x04, 0xFF, 0xFE, 0x01, 0x00, 0x01, 0x04, 0x7F, 0xFE, 0x48, 0x24, 0x44, 0x44,
    0x5F, 0xF4, 0x41, 0x04, 0x41, 0x04, 0x5F, 0xF4, 0x41, 0x04, 0x41, 0x04, 0x41, 0x14, 0x40, 0x08};

/*-- ID:65,字符:"西",ASCII编码:CEF7,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_65[] PROGMEM = {
    0x00, 0x00, 0x00, 0x04, 0xFF, 0xFE, 0x04, 0x40, 0x04, 0x40, 0x04, 0x44, 0x7F, 0xFE, 0x44, 0x44,
    0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x48, 0x34, 0x50, 0x04, 0x40, 0x04, 0x7F, 0xFC, 0x40, 0x04};

/*-- ID:66,字符:"旋",ASCII编码:D0FD,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_66[] PROGMEM = {
    0x20, 0x80, 0x10, 0x84, 0x14, 0xFE, 0xFE, 0x80, 0x21, 0x00, 0x22, 0xFE, 0x3C, 0x22, 0x24, 0x24,
    0x24, 0xA0, 0x24, 0xA8, 0x24, 0xBC, 0x24, 0xA0, 0x44, 0xA0, 0x55, 0x60, 0x8A, 0x26, 0x04, 0x1C};

/*-- ID:67,字符:"转",ASCII编码:D7AA,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_67[] PROGMEM = {
    0x10, 0x40, 0x10, 0x40, 0x10, 0x48, 0xFD, 0xFC, 0x20, 0x40, 0x28, 0x44, 0x4B, 0xFE, 0x7C, 0x80,
    0x08, 0x80, 0x09, 0xFC, 0x1C, 0x08, 0xE8, 0x10, 0x48, 0x90, 0x08, 0x60, 0x08, 0x20, 0x08, 0x10};

/*-- ID:68,字符:"不",ASCII编码:B2BB,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_68[] PROGMEM = {
    0x00, 0x04, 0xFF, 0xFE, 0x00, 0x80, 0x00, 0x80, 0x01, 0x00, 0x01, 0x00, 0x03, 0x40, 0x05, 0x20,
    0x09, 0x18, 0x11, 0x0C, 0x21, 0x04, 0x41, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00};

/*-- ID:69,字符:"定",ASCII编码:B6A8,对应字:宽x高=16x16,画布:宽W=16 高H=16,共32字节*/
const unsigned char text_font_69[] PROGMEM = {
    0x02, 0x00, 0x01, 0x00, 0x7F, 0xFE, 0x40, 0x02, 0x80, 0x24, 0x1F, 0xF0, 0x01, 0x00, 0x01, 0x00,
    0x11, 0x20, 0x11, 0xF0, 0x11, 0x00, 0x11, 0x00, 0x11, 0x00, 0x29, 0x06, 0x47, 0xFC, 0x80, 0x00};

const int text_font_allArray_LEN = 70;
const unsigned char *text_font_allArray[70] = {
    text_font_0,
    text_font_1,
    text_font_2,
    text_font_3,
    text_font_4,
    text_font_5,
    text_font_6,
    text_font_7,
    text_font_8,
    text_font_9,
    text_font_10,
    text_font_11,
    text_font_12,
    text_font_13,
    text_font_14,
    text_font_15,
    text_font_16,
    text_font_17,
    text_font_18,
    text_font_19,
    text_font_20,
    text_font_21,
    text_font_22,
    text_font_23,
    text_font_24,
    text_font_25,
    text_font_26,
    text_font_27,
    text_font_28,
    text_font_29,
    text_font_30,
    text_font_31,
    text_font_32,
    text_font_33,
    text_font_34,
    text_font_35,
    text_font_36,
    text_font_37,
    text_font_38,
    text_font_39,
    text_font_40,
    text_font_41,
    text_font_42,
    text_font_43,
    text_font_44,
    text_font_45,
    text_font_46,
    text_font_47,
    text_font_48,
    text_font_49,
    text_font_50,
    text_font_51,
    text_font_52,
    text_font_53,
    text_font_54,
    text_font_55,
    text_font_56,
    text_font_57,
    text_font_58,
    text_font_59,
    text_font_60,
    text_font_61,
    text_font_62,
    text_font_63,
    text_font_64,
    text_font_65,
    text_font_66,
    text_font_67,
    text_font_68,
    text_font_69};

// 晴少云间多阴有风平静微和清强劲疾大烈暴狂爆飓热带霾中度重严阵雨雷并伴冰雹小特极端降毛细雪天气夹冻浮尘扬沙龙卷雾浓轻冷未知无向东北南西旋转不定"
const std::map<std::string, int> textFontMap = {
    {"晴", 0},
    {"少", 1},
    {"云", 2},
    {"间", 3},
    {"多", 4},
    {"阴", 5},
    {"有", 6},
    {"风", 7},
    {"平", 8},
    {"静", 9},
    {"微", 10},
    {"和", 11},
    {"清", 12},
    {"强", 13},
    {"劲", 14},
    {"疾", 15},
    {"大", 16},
    {"烈", 17},
    {"暴", 18},
    {"狂", 19},
    {"爆", 20},
    {"飓", 21},
    {"热", 22},
    {"带", 23},
    {"霾", 24},
    {"中", 25},
    {"度", 26},
    {"重", 27},
    {"严", 28},
    {"阵", 29},
    {"雨", 30},
    {"雷", 31},
    {"并", 32},
    {"伴", 33},
    {"冰", 34},
    {"雹", 35},
    {"小", 36},
    {"特", 37},
    {"极", 38},
    {"端", 39},
    {"降", 40},
    {"毛", 41},
    {"细", 42},
    {"雪", 43},
    {"天", 44},
    {"气", 45},
    {"夹", 46},
    {"冻", 47},
    {"浮", 48},
    {"尘", 49},
    {"扬", 50},
    {"沙", 51},
    {"龙", 52},
    {"卷", 53},
    {"雾", 54},
    {"浓", 55},
    {"轻", 56},
    {"冷", 57},
    {"未", 58},
    {"知", 59},
    {"无", 60},
    {"向", 61},
    {"东", 62},
    {"北", 63},
    {"南", 64},
    {"西", 65},
    {"旋", 66},
    {"转", 67},
    {"不", 68},
    {"定", 69}};
#pragma endregion

#pragma region 图片
// '大风_heavy-wind', 24x24px
const unsigned char bitmap_heavy_wind[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x07, 0xf8, 0x00, 0x0c, 0x0c, 0x00, 0x10,
    0x06, 0x00, 0x30, 0x02, 0x00, 0x20, 0x03, 0xf0, 0x20, 0x61, 0x18, 0x61, 0xe0, 0x0c, 0x01, 0x00,
    0x04, 0x01, 0x00, 0x06, 0x01, 0xff, 0x06, 0x00, 0xff, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x0c,
    0x0f, 0xff, 0xf8, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// '大雾_fog', 24x24px
const unsigned char bitmap_fog[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x07, 0xf8, 0x00, 0x0c, 0x0c, 0x00, 0x10,
    0x06, 0x00, 0x30, 0xc2, 0x00, 0x23, 0xf3, 0xf0, 0x22, 0x01, 0x18, 0x66, 0x00, 0x0c, 0x66, 0x00,
    0x04, 0x22, 0x00, 0x06, 0x22, 0x07, 0x86, 0x30, 0x07, 0x84, 0x18, 0x00, 0x04, 0x08, 0x00, 0x1c,
    0x00, 0x3c, 0x18, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc3, 0xe0, 0x07,
    0xc3, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// '大雨_heavy-rain', 24x24px
const unsigned char bitmap_heavy_rain[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x07, 0xf8, 0x00, 0x0c, 0x0c, 0x00, 0x10,
    0x06, 0x00, 0x30, 0x02, 0x00, 0x20, 0x03, 0xf0, 0x20, 0x01, 0x18, 0x60, 0x00, 0x0c, 0x60, 0x00,
    0x04, 0x20, 0x00, 0x06, 0x20, 0x00, 0x06, 0x30, 0x00, 0x04, 0x19, 0x81, 0x84, 0x09, 0x81, 0x9c,
    0x01, 0x99, 0x98, 0x01, 0x99, 0x80, 0x01, 0x99, 0x80, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// '多云_cloudy', 24x24px
const unsigned char bitmap_cloudy[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x07, 0xf8, 0x00, 0x0c, 0x0c, 0x00, 0x10,
    0x06, 0x00, 0x30, 0xc2, 0x00, 0x23, 0xf3, 0xf0, 0x22, 0x01, 0x18, 0x66, 0x00, 0x0c, 0x66, 0x00,
    0x04, 0x22, 0x00, 0x06, 0x22, 0x00, 0x06, 0x30, 0x00, 0x04, 0x18, 0x0c, 0x04, 0x08, 0x3f, 0x1c,
    0x00, 0x3f, 0x18, 0x00, 0x7f, 0x80, 0x00, 0x7f, 0x80, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00,
    0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// '刮风_wind', 24x24px
const unsigned char bitmap_wind[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x60, 0x00, 0x00,
    0x60, 0x00, 0x00, 0x60, 0x00, 0x00, 0x3f, 0xf8, 0x1e, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00,
    0x00, 0x30, 0x00, 0x00, 0x1f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xff, 0xc0, 0x01, 0x80, 0x00, 0x01, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0xf0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// '晴天_sunny', 24x24px
const unsigned char bitmap_sunny[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
    0x07, 0xc0, 0x00, 0x0c, 0xe0, 0x03, 0xf8, 0x20, 0x0e, 0x1c, 0x20, 0x18, 0x06, 0x26, 0x10, 0x02,
    0x20, 0x21, 0xe3, 0xe0, 0x23, 0x33, 0xf0, 0x26, 0x00, 0x08, 0x66, 0x00, 0x04, 0x62, 0x00, 0x04,
    0x22, 0x00, 0x06, 0x20, 0x00, 0x06, 0x30, 0x00, 0x04, 0x18, 0x00, 0x0c, 0x08, 0x00, 0x18, 0x00,
    0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// '太阳_sun', 24x24px
const unsigned char bitmap_sun[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x10, 0x04,
    0x18, 0x20, 0x00, 0xff, 0x00, 0x01, 0xff, 0x80, 0x03, 0xff, 0xc0, 0x03, 0xff, 0xc0, 0x03, 0xff,
    0xc0, 0x67, 0xff, 0xe6, 0x67, 0xff, 0xe6, 0x03, 0xff, 0xc0, 0x03, 0xff, 0xc0, 0x03, 0xff, 0xc0,
    0x01, 0xff, 0x80, 0x00, 0xff, 0x00, 0x04, 0x18, 0x20, 0x08, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00};
// '沙尘暴_sandstorm', 24x24px
const unsigned char bitmap_sandstorm[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x01, 0xf8, 0x00, 0x03, 0x0c, 0x00,
    0x02, 0x04, 0x00, 0x06, 0x06, 0x00, 0x00, 0x06, 0x00, 0x00, 0x04, 0x00, 0x00, 0x0c, 0x3f, 0xff,
    0xf8, 0x3f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x3c, 0x3e, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x7c, 0x3c, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0xfc, 0x3f,
    0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// '雷雨_thunderstorm-one', 24x24px
const unsigned char bitmap_thunderstorm_one[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x0e, 0x1c, 0x00, 0x18, 0x06, 0x00, 0x10,
    0x02, 0x00, 0x20, 0x03, 0x00, 0x20, 0x01, 0xf0, 0x20, 0x00, 0x08, 0x60, 0x3e, 0x04, 0x60, 0x7f,
    0x04, 0x20, 0x7e, 0x06, 0x20, 0x7c, 0x06, 0x30, 0xfc, 0x04, 0x18, 0xff, 0x8c, 0x08, 0xff, 0x18,
    0x00, 0x7e, 0x10, 0x00, 0x1e, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x38, 0x00, 0x00, 0x30, 0x00, 0x00,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// '雷雨_thunderstorm', 24x24px
const unsigned char bitmap_thunderstorm[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x07, 0xf8, 0x00, 0x0c, 0x0c, 0x00, 0x10,
    0x06, 0x00, 0x30, 0x02, 0x00, 0x20, 0x03, 0xf0, 0x20, 0x01, 0x18, 0x60, 0x00, 0x0c, 0x60, 0x00,
    0x04, 0x20, 0x84, 0x06, 0x21, 0x0c, 0x06, 0x30, 0x18, 0x04, 0x18, 0x30, 0x04, 0x08, 0x7e, 0x1c,
    0x00, 0x7e, 0x18, 0x00, 0x0c, 0x00, 0x00, 0x18, 0x00, 0x00, 0x30, 0x80, 0x00, 0x21, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// '太阳1_sun-one', 24x24px
const unsigned char bitmap_sun_one[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x30, 0x08,
    0x7e, 0x10, 0x00, 0xff, 0x00, 0x01, 0xff, 0x80, 0x03, 0xff, 0xc0, 0x07, 0xff, 0xe0, 0x07, 0xff,
    0xe0, 0x47, 0xff, 0xe2, 0x47, 0xff, 0xe2, 0x07, 0xff, 0xe0, 0x07, 0xff, 0xe0, 0x03, 0xff, 0xc0,
    0x01, 0xff, 0x80, 0x00, 0xff, 0x00, 0x08, 0x7e, 0x10, 0x0c, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00};
// '下雪_snow', 24x24px
const unsigned char bitmap_snow[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x07, 0xf8, 0x00, 0x0c, 0x0c, 0x00, 0x10,
    0x06, 0x00, 0x30, 0x02, 0x00, 0x20, 0x03, 0xf0, 0x20, 0x01, 0x18, 0x60, 0x00, 0x0c, 0x60, 0x00,
    0x04, 0x20, 0xc0, 0x06, 0x21, 0xe1, 0x06, 0x31, 0xe1, 0x04, 0x18, 0xc7, 0xc4, 0x08, 0x01, 0x1c,
    0x00, 0x01, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x18, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// '夜间多云_cloudy-night', 24x24px
const unsigned char bitmap_cloudy_night[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x07, 0xf8, 0x00, 0x0c, 0x0c, 0x00, 0x10,
    0x06, 0x00, 0x30, 0xc2, 0x00, 0x23, 0xf3, 0xf0, 0x22, 0x01, 0x18, 0x66, 0x00, 0x0c, 0x66, 0x00,
    0x04, 0x22, 0x00, 0x06, 0x22, 0x00, 0x06, 0x30, 0x00, 0x04, 0x18, 0x0c, 0x04, 0x08, 0x3c, 0x1c,
    0x00, 0x38, 0x18, 0x00, 0x79, 0x80, 0x00, 0x7f, 0x80, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00,
    0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// '小雨_light-rain', 24x24px
const unsigned char bitmap_light_rain[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x07, 0xf8, 0x00, 0x0c, 0x0c, 0x00, 0x10,
    0x06, 0x00, 0x30, 0x02, 0x00, 0x20, 0x03, 0xf0, 0x20, 0x01, 0x18, 0x60, 0x00, 0x0c, 0x60, 0x00,
    0x04, 0x21, 0x81, 0x86, 0x21, 0x81, 0x86, 0x31, 0x99, 0x84, 0x18, 0x18, 0x04, 0x08, 0x18, 0x1c,
    0x00, 0x00, 0x18, 0x01, 0x81, 0x80, 0x01, 0x81, 0x80, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// '雪花_snowflake', 24x24px
const unsigned char bitmap_snowflake[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0xdb, 0x00, 0x00, 0x7e, 0x00, 0x06,
    0x3c, 0x60, 0x12, 0x18, 0x48, 0x1f, 0x18, 0xf8, 0x07, 0x18, 0xe0, 0x0f, 0x99, 0xf0, 0x3c, 0xff,
    0x3c, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x3c, 0xff, 0x3c, 0x0f, 0x99, 0xf0, 0x07, 0x18, 0xe0,
    0x1f, 0x18, 0xf8, 0x12, 0x18, 0x48, 0x06, 0x3c, 0x60, 0x00, 0x7e, 0x00, 0x00, 0xdb, 0x00, 0x00,
    0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
// '月亮_moon', 24x24px
const unsigned char bitmap_moon[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x01, 0xfe, 0x00, 0x03, 0xf8, 0x00, 0x0f, 0xe0, 0x00, 0x0f,
    0xe0, 0x00, 0x1f, 0xc0, 0x00, 0x3f, 0xc0, 0x00, 0x3f, 0xc0, 0x00, 0x3f, 0xc0, 0x04, 0x7f, 0xc0,
    0x06, 0x7f, 0xe0, 0x0e, 0x7f, 0xf0, 0x0e, 0x7f, 0xf8, 0x3c, 0x3f, 0xff, 0xfc, 0x3f, 0xff, 0xfc,
    0x3f, 0xff, 0xfc, 0x1f, 0xff, 0xf8, 0x0f, 0xff, 0xf0, 0x0f, 0xff, 0xf0, 0x03, 0xff, 0xc0, 0x01,
    0xff, 0x80, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00};

const unsigned char *bitmap_allArray[16] = {
    bitmap_heavy_wind,
    bitmap_fog,
    bitmap_heavy_rain,
    bitmap_cloudy,
    bitmap_wind,
    bitmap_sunny,
    bitmap_sun,
    bitmap_sandstorm,
    bitmap_thunderstorm_one,
    bitmap_thunderstorm,
    bitmap_sun_one,
    bitmap_snow,
    bitmap_cloudy_night,
    bitmap_light_rain,
    bitmap_snowflake};

const std::map<std::string, int> bitmap_map = {
    {"晴", 10},
    {"少云", 6},
    {"晴间多云", 3},
    {"多云", 3},
    {"阴", 3},
    {"有风", 0},
    {"平静", 5},
    {"微风", 0},
    {"和风", 0},
    {"清风", 0},
    {"强风/劲风", 4},
    {"疾风", 4},
    {"大风", 4},
    {"烈风", 4},
    {"风暴", 4},
    {"狂爆风", 4},
    {"飓风", 4},
    {"热带风暴", 4},
    {"霾", 1},
    {"中度霾", 1},
    {"重度霾", 1},
    {"严重霾", 1},
    {"阵雨", 2},
    {"雷阵雨", 9},
    {"雷阵雨伴有冰雹", 9},
    {"小雨", 13},
    {"中雨", 13},
    {"大雨", 2},
    {"暴雨", 2},
    {"大暴雨", 2},
    {"特大暴雨", 2},
    {"强阵雨", 2},
    {"强雷阵雨", 9},
    {"极端降雨", 2},
    {"毛毛雨/细雨", 13},
    {"雨", 13},
    {"小雨-中雨", 13},
    {"中雨-大雨", 13},
    {"大雨-暴雨", 2},
    {"暴雨-大暴雨", 2},
    {"大暴雨-特大暴雨", 2},
    {"雨雪天气", 11},
    {"雨夹雪", 11},
    {"阵雨夹雪", 11},
    {"冻雨", 11},
    {"雪", 14},
    {"阵雪", 14},
    {"小雪", 14},
    {"中雪", 14},
    {"大雪", 14},
    {"暴雪", 14},
    {"小雪-中雪", 14},
    {"中雪-大雪", 14},
    {"大雪-暴雪", 14},
    {"浮尘", 1},
    {"扬沙", 7},
    {"沙尘暴", 7},
    {"强沙尘暴", 7},
    {"雾", 1},
    {"浓雾", 1},
    {"强浓雾", 1},
    {"轻雾", 1},
    {"大雾", 1},
    {"特强浓雾", 1},
    {"热", 10},
    {"冷", 14},
    {"未知", 12}};

#pragma endregion

// set up pins we are going to use to talk to the screen
#define TFT_DC D8   // register select (stands for Data Control perhaps!)
#define TFT_RST D15 // Display reset pin, you can also connect this to the ESP8266 reset
                    // in which case, set this #define pin to -1!
#define TFT_CS D2   // Display enable (Chip select), if not enabled will not talk on SPI bus

// initialise the routine to talk to this display with these pin connections (as we've missed off
// TFT_SCLK and TFT_MOSI the routine presumes we are using hardware SPI and internally uses 13 and 11
Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);

// wifi & client
const uint8_t fingerprint[20] = {0x40, 0xaf, 0x00, 0x6b, 0xec, 0x90, 0x22, 0x41, 0x8e, 0xa3, 0xad, 0xfa, 0x1a, 0xe8, 0x25, 0x41, 0x1d, 0x1a, 0x54, 0xb3};
ESP8266WiFiMulti WiFiMulti;

// weather
const char *weather;
const char *humidity;
const char *temperature;
const char *windpower;
const char *wind;

float p = 3.1415926;

void setup(void)
{
  Serial.begin(9600);
  Serial.println("Hello! ST77xx TFT Test");
  // Use this initializer if you're using a 1.8" TFT
  // tft.initR(INITR_BLACKTAB);   // initialize a ST7735S chip, black tab

  // Use this initializer (uncomment) if you're using a 1.44" TFT
  tft.initR(INITR_144GREENTAB); // initialize a ST7735S chip, black tab

  // Use this initializer (uncomment) if you're using a 0.96" 180x60 TFT
  // tft.initR(INITR_MINI160x80);   // initialize a ST7735S chip, mini display

  // Use this initializer (uncomment) if you're using a 1.54" 240x240 TFT
  // tft.init(128, 128);   // initialize a ST7789 chip, 240x240 pixels

  Serial.println("Initialized");
  uint16_t time = millis();
  tft.fillScreen(ST77XX_BLACK);
  time = millis() - time;

  Serial.println(time, DEC);
  delay(500);

  // large block of text
  tft.fillScreen(ST77XX_BLACK);
  testdrawtext("1234567890abcdefghijklmopqrstuvwxyz!@#$%^&*()", ST77XX_WHITE);
  delay(1000);

  // tft print function!
  tftPrintTest();
  Serial.println("Printed");
  delay(4000);

  // a single pixel
  tft.drawPixel(tft.width() / 2, tft.height() / 2, ST77XX_GREEN);
  delay(500);

  // line draw test
  testlines(ST77XX_YELLOW);
  delay(500);

  // optimized lines
  testfastlines(ST77XX_RED, ST77XX_BLUE);
  delay(500);

  testdrawrects(ST77XX_GREEN);
  delay(500);

  testfillrects(ST77XX_YELLOW, ST77XX_MAGENTA);
  delay(500);

  tft.fillScreen(ST77XX_BLACK);
  testfillcircles(10, ST77XX_BLUE);
  testdrawcircles(10, ST77XX_WHITE);
  delay(500);

  testroundrects();
  delay(500);

  testtriangles();
  delay(500);

  Serial.println("done");
  delay(1000);

  // try connect to wifi
  wifiCoon();
  delay(1000);

  // get weather data
  getData();
}

void loop()
{
  tft.invertDisplay(true);
  delay(5000);
  tft.invertDisplay(false);
  delay(5000);
}

void testlines(uint16_t color)
{
  tft.fillScreen(ST77XX_BLACK);
  for (int16_t x = 0; x < tft.width(); x += 6)
  {
    tft.drawLine(0, 0, x, tft.height() - 1, color);
    delay(0);
  }
  for (int16_t y = 0; y < tft.height(); y += 6)
  {
    tft.drawLine(0, 0, tft.width() - 1, y, color);
    delay(0);
  }

  tft.fillScreen(ST77XX_BLACK);
  for (int16_t x = 0; x < tft.width(); x += 6)
  {
    tft.drawLine(tft.width() - 1, 0, x, tft.height() - 1, color);
    delay(0);
  }
  for (int16_t y = 0; y < tft.height(); y += 6)
  {
    tft.drawLine(tft.width() - 1, 0, 0, y, color);
    delay(0);
  }

  tft.fillScreen(ST77XX_BLACK);
  for (int16_t x = 0; x < tft.width(); x += 6)
  {
    tft.drawLine(0, tft.height() - 1, x, 0, color);
    delay(0);
  }
  for (int16_t y = 0; y < tft.height(); y += 6)
  {
    tft.drawLine(0, tft.height() - 1, tft.width() - 1, y, color);
    delay(0);
  }

  tft.fillScreen(ST77XX_BLACK);
  for (int16_t x = 0; x < tft.width(); x += 6)
  {
    tft.drawLine(tft.width() - 1, tft.height() - 1, x, 0, color);
    delay(0);
  }
  for (int16_t y = 0; y < tft.height(); y += 6)
  {
    tft.drawLine(tft.width() - 1, tft.height() - 1, 0, y, color);
    delay(0);
  }
}

void testdrawtext(char *text, uint16_t color)
{
  tft.setCursor(0, 0);
  tft.setTextColor(color);
  tft.setTextWrap(true);
  tft.setTextSize(1);
  tft.print(text);
}

void testfastlines(uint16_t color1, uint16_t color2)
{
  tft.fillScreen(ST77XX_BLACK);
  for (int16_t y = 0; y < tft.height(); y += 5)
  {
    tft.drawFastHLine(0, y, tft.width(), color1);
  }
  for (int16_t x = 0; x < tft.width(); x += 5)
  {
    tft.drawFastVLine(x, 0, tft.height(), color2);
  }
}

void testdrawrects(uint16_t color)
{
  tft.fillScreen(ST77XX_BLACK);
  for (int16_t x = 0; x < tft.width(); x += 6)
  {
    tft.drawRect(tft.width() / 2 - x / 2, tft.height() / 2 - x / 2, x, x, color);
  }
}

void testfillrects(uint16_t color1, uint16_t color2)
{
  tft.fillScreen(ST77XX_BLACK);
  for (int16_t x = tft.width() - 1; x > 6; x -= 6)
  {
    tft.fillRect(tft.width() / 2 - x / 2, tft.height() / 2 - x / 2, x, x, color1);
    tft.drawRect(tft.width() / 2 - x / 2, tft.height() / 2 - x / 2, x, x, color2);
  }
}

void testfillcircles(uint8_t radius, uint16_t color)
{
  for (int16_t x = radius; x < tft.width(); x += radius * 2)
  {
    for (int16_t y = radius; y < tft.height(); y += radius * 2)
    {
      tft.fillCircle(x, y, radius, color);
    }
  }
}

void testdrawcircles(uint8_t radius, uint16_t color)
{
  for (int16_t x = 0; x < tft.width() + radius; x += radius * 2)
  {
    for (int16_t y = 0; y < tft.height() + radius; y += radius * 2)
    {
      tft.drawCircle(x, y, radius, color);
    }
  }
}

void testtriangles()
{
  tft.fillScreen(ST77XX_BLACK);
  int color = 0xF800;
  int t;
  int w = tft.width() / 2;
  int x = tft.height() - 1;
  int y = 0;
  int z = tft.width();
  for (t = 0; t <= 15; t++)
  {
    tft.drawTriangle(w, y, y, x, z, x, color);
    x -= 4;
    y += 4;
    z -= 4;
    color += 100;
  }
}

void testroundrects()
{
  tft.fillScreen(ST77XX_BLACK);
  int color = 100;
  int i;
  int t;
  for (t = 0; t <= 4; t += 1)
  {
    int x = 0;
    int y = 0;
    int w = tft.width() - 2;
    int h = tft.height() - 2;
    for (i = 0; i <= 16; i += 1)
    {
      tft.drawRoundRect(x, y, w, h, 5, color);
      x += 2;
      y += 3;
      w -= 4;
      h -= 6;
      color += 1100;
    }
    color += 100;
  }
}

void tftPrintTest()
{
  tft.setTextWrap(false);
  tft.fillScreen(ST77XX_BLACK);
  tft.setCursor(0, 20);
  tft.setTextColor(ST77XX_RED);
  tft.setTextSize(1);
  tft.println("Are you ok?");
  delay(1000);
  tft.setTextColor(ST77XX_YELLOW);
  tft.setTextSize(2);
  tft.println("Are you ok?");
  delay(2000);
  tft.setTextColor(ST77XX_GREEN);
  tft.setTextSize(3);
  tft.println("Hello!");
  delay(1600);
  tft.setTextSize(2);
  tft.setTextColor(ST77XX_WHITE);
  tft.println("Thank you!");
  tft.setTextColor(ST77XX_BLUE);
  delay(1000);
  tft.setTextSize(2);
  tft.println("Thank you");
  tft.println("very much!");
  delay(3000);
}

// connect to the WiFi network
void wifiCoon()
{
  tft.fillScreen(ST77XX_BLACK);
  Serial.println("Connecting to WiFi...");
  tft.setCursor(0, 0);
  tft.setTextColor(ST77XX_WHITE);
  tft.setTextSize(1);
  tft.setTextWrap(true);
  tft.print("Connecting to WiFi...");
  WiFi.mode(WIFI_STA);
  WiFiMulti.addAP("shebei", "shebei2018");
  int try_count = 1;
  while (WiFiMulti.run() != WL_CONNECTED)
  {
    delay(2000);
    tft.setCursor(0, 50);
    tft.print("try again...");
    tft.print(try_count);
    tft.print(" times");
    try_count++;
  }
  tft.fillScreen(ST77XX_BLACK);
  tft.setCursor(0, 0);
  tft.setTextColor(ST77XX_WHITE);
  tft.setTextWrap(true);
  tft.print("Connected to WiFi!");
  delay(2000);
}

// shou the image on the screen
void showBitmap(int x, int y, const uint8_t *bitmap, int w, int h, uint16_t color)
{
  tft.drawBitmap(x, y, bitmap, w, h, color);
}

// client to get data to the server
void getData()
{
  if (WiFiMulti.run() == WL_CONNECTED)
  {
    std::unique_ptr<BearSSL::WiFiClientSecure> client(new BearSSL::WiFiClientSecure);

    client->setFingerprint(fingerprint);
    // Or, if you happy to ignore the SSL certificate, then use the following line instead:
    client->setInsecure();

    HTTPClient https;
    if (https.begin(*client, "https://restapi.amap.com/v3/weather/weatherInfo?city=330483&key=key"))
    { // HTTPS
      // start connection and send HTTP header
      int httpCode = https.GET();

      // httpCode will be negative on error
      if (httpCode > 0)
      {
        // HTTP header has been send and Server response header has been handled
        Serial.printf("[HTTPS] GET... code: %d\n", httpCode);
        // file found at server
        if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_MOVED_PERMANENTLY)
        {
          String payload = https.getString();
          Serial.println(payload);
          // deserialize the JSON data
          DynamicJsonDocument doc(1024);
          DeserializationError error = deserializeJson(doc, payload);
          if (error)
          {
            Serial.print(F("deserializeJson() failed: "));
            testdrawtext("deserializeJson() failed: ", ST77XX_WHITE);
            Serial.println(error.f_str());
            testdrawtext(error.f_str(), ST77XX_WHITE);
          }
          weather = doc["lives"][0]["weather"];
          humidity = doc["lives"][0]["humidity"];
          temperature = doc["lives"][0]["temperature"];
          windpower = doc["lives"][0]["windpower"];
          wind = doc["lives"][0]["winddirection"];
          Serial.println(weather);
          Serial.println(humidity);
          Serial.println(temperature);
          Serial.println(windpower);
          Serial.println(wind);

          tft.fillScreen(ST77XX_BLACK);
          // show the weather bitmap
          showBitmap(10, 10, bitmap_allArray[bitmap_map.at(weather)], 24, 24, ST77XX_YELLOW);
          // show the weather with chinese
          int char_index = 0;
          for (int i = 0; weather[i] != 0; ++i)
          {
            char temp_ch[3] = {weather[i], weather[i + 1], weather[i + 2]};
            Serial.println(temp_ch);
            showBitmap(40 + char_index * 20, 14, text_font_allArray[textFontMap.at(temp_ch)], 16, 16, ST77XX_YELLOW);
            char_index++;
            i += 2;
          }
          // show the wind with chinese
          char_index = 0;
          for (int i = 0; wind[i] != 0; ++i)
          {
            char temp_ch[3] = {wind[i], wind[i + 1], wind[i + 2]};
            Serial.println(temp_ch);
            showBitmap(40 + char_index * 20, 34, text_font_allArray[textFontMap.at(temp_ch)], 16, 16, ST77XX_YELLOW);
            char_index++;
            i += 2;
          }
          showBitmap(40 + char_index * 20, 34, text_font_allArray[textFontMap.at("风")], 16, 16, ST77XX_YELLOW);

        }
      }
      else
      {
        Serial.printf("[HTTPS] GET... code: %d\n", httpCode);
        textdrawtext("[HTTPS] GET... code: ", ST77XX_WHITE);
        Serial.printf("[HTTPS] GET... failed, error: %s\n", https.errorToString(httpCode).c_str());
        textdrawtext(https.errorToString(httpCode).c_str(), ST77XX_WHITE);
      }
      https.end();
    }
    else
    {
      Serial.printf("[HTTPS] Unable to connect\n");
      textdrawtext("[HTTPS] Unable to connect", ST77XX_WHITE);
    }
  }
}
